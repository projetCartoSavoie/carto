<?php
/**
 * Controleur pour les recherches DbPedia
 *
 *
 * @author Rémy Cluze <Remy.Cluze@etu.univ-savoie.fr>
 * @author Anthony Di Lisio <Anthony.Di-Lisio@etu.univ-savoie.fr>
 * @author Juliana Leclaire <Juliana.Leclaire@etu.univ-savoie.fr>
 * @author Rémi Mollard <Remi.Mollard@etu.univ-savoie.fr>
 * @author Céline de Roland <Celine.de-Roland@etu.univ-savoie.fr>
 *
 * @version 1.0
 */

namespace Carto\DonneesBundle\Controller;

use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Response;
use Carto\DonneesBundle\Entity\WN\ASynset;
use Carto\DonneesBundle\Entity\WN\RSynset;
use Carto\DonneesBundle\Entity\WN\NSynset;
use Carto\DonneesBundle\Entity\WN\VSynset;
use Carto\DonneesBundle\Entity\WN\Mot;

/**
 * Controleur pour les recherches DbPedia
 */
class DbPediaController extends Controller
{

	/**
	 * fonction index
	 *
	 * Effectue une recherche simple : pour un mot donné, on trouve ses relations directes, ses synsets et les relations directes de ces synsets
	 *
	 * @param string $recherche
	 * @return Vue twig
	*/
	public function indexAction($recherche)
	{

		//Faire une requete de profondeur 3 sans les sameAs
		$format = 'json';

		$sparql = 
'
SELECT DISTINCT * WHERE 
{
 ?sujet rdfs:label "'.ucfirst($recherche).'"@en .
 ?sujet ?property ?objet .
 ?objet ?property2 ?objet2 .
 ?objet2 ?property3 ?objet3 .
 FILTER NOT EXISTS { 
  ?sujet owl:sameAs ?objet .  
 }
 FILTER NOT EXISTS { 
  ?objet owl:sameAs ?objet2 . 
 }
 FILTER NOT EXISTS { 
  ?objet2 owl:sameAs ?objet3 .
 }
} LIMIT 20
';
		$searchUrl = 'http://dbpedia.org/sparql?'
				.'query='.urlencode($sparql)
				.'&format='.$format;

		$ch= curl_init();
		curl_setopt($ch,CURLOPT_URL,$searchUrl);
		curl_setopt($ch,CURLOPT_RETURNTRANSFER,true);
		$response = curl_exec($ch);
		curl_close($ch);

		//Récupérer le tableau results[bindings] du json obtenu
		$tableau = json_decode($response,true);
		$resultats = $tableau['results']['bindings'];
		//var_dump($resultats);

		//Enlever tous les noeuds qui contiennent des litéraux n'ayant pas "xml:lang": "en"
		foreach ($resultats as $cle => $chaine) //Un résultat est une chaine d'objets liés par des relations
		{
			if ( ($chaine['sujet']['type'] == 'literal' and isset($chaine['sujet']['xml:lang']) and $chaine['sujet']['xml:lang'] != 'en')
				or ($chaine['objet']['type'] == 'literal' and isset($chaine['objet']['xml:lang']) and $chaine['objet']['xml:lang'] != 'en')
				or ($chaine['objet2']['type'] == 'literal' and isset($chaine['objet2']['xml:lang']) and $chaine['objet2']['xml:lang'] != 'en')
				or ($chaine['objet3']['type'] == 'literal' and isset($chaine['objet3']['xml:lang']) and $chaine['objet3']['xml:lang'] != 'en')
			)
			{
				unset($resultats[$cle]);
			}
		}
		//var_dump($resultats);

		//Pour chaque noeud de type URI, essayer de le remplacer par un label en faisant une requete
		/*foreach ($resultats as $cle => $chaine) //Un résultat est une chaine d'objets liés par des relations
		{
			if ( $chaine['objet']['type'] == 'uri' )
			{
				//
			}
		}
		var_dump($resultats);*/

		//Etablir la liste des noeuds et des relations
		$id = 1;
		$jsoncommun = array();
		$lnoeuds = array();
		$lrelations = array();
		foreach ($resultats as $cle => $chaine) //Un résultat est une chaine d'objets liés par des relations
		{
			$lnoeuds[] = $chaine['sujet']['value'];
			$lrelations[] = $chaine['property']['value'];
			$lnoeuds[] = $chaine['objet']['value'];
			$lrelations[] = $chaine['property2']['value'];
			$lnoeuds[] = $chaine['objet2']['value'];
			$lrelations[] = $chaine['property3']['value'];
			$lnoeuds[] = $chaine['objet3']['value'];
		}
		$lnoeuds = array_unique($lnoeuds);
		$idnoeuds = array_flip($lnoeuds);
		$lrelations = array_unique($lrelations);
		$idrelations = array_flip($lrelations);

		//var_dump($idnoeuds);
		//var_dump($idrelations);

		$jsoncommun['noeuds'] = array();
		foreach($lnoeuds as $cle => $valeur)
		{
			$jsoncommun['noeuds'][] = array('id' => $cle, 'nom' => $valeur);
			$jsoncommun['graphe'][$cle] = array('noeud' => $cle);
		}

		$jsoncommun['relations'] = array();
		foreach($lrelations as $valeur)
		{
			$jsoncommun['relations'][] = $valeur;
		}
		
		//Coder les relations
		foreach ($resultats as $cle => $chaine) //Un résultat est une chaine d'objets liés par des relations
		{
			//Mettre en relation sujet et objet par la relation property
			if (!isset($jsoncommun['graphe'][$idnoeuds[$chaine['sujet']['value']]][$chaine['property']['value']]))
			{
				$jsoncommun['graphe'][$idnoeuds[$chaine['sujet']['value']]][$chaine['property']['value']] = array();
			}
			$jsoncommun['graphe'][$idnoeuds[$chaine['sujet']['value']]][$chaine['property']['value']][] = $idnoeuds[$chaine['objet']['value']];
			//Mettre en relation objet et objet2 par la relation property2
			if (!isset($jsoncommun['graphe'][$idnoeuds[$chaine['objet']['value']]][$chaine['property2']['value']]))
			{
				$jsoncommun['graphe'][$idnoeuds[$chaine['objet']['value']]][$chaine['property2']['value']] = array();
			}
			$jsoncommun['graphe'][$idnoeuds[$chaine['objet']['value']]][$chaine['property2']['value']][] = $idnoeuds[$chaine['objet2']['value']];
			//Mettre en relation objet2 et objet3 par la relation property3
			if (!isset($jsoncommun['graphe'][$idnoeuds[$chaine['objet2']['value']]][$chaine['property3']['value']]))
			{
				$jsoncommun['graphe'][$idnoeuds[$chaine['objet2']['value']]][$chaine['property3']['value']] = array();
			}
			$jsoncommun['graphe'][$idnoeuds[$chaine['objet2']['value']]][$chaine['property3']['value']][] = $idnoeuds[$chaine['objet3']['value']];
		}

		//var_dump($jsoncommun);
		//var_dump($jsoncommun['graphe']);

		//J'ajoute la partie "noeud" des éléments du graphe et j'élimine les doublons
		/*foreach ($jsoncommun['graphe'] as $cle => $valeur)
		{
			$valeur = array_merge(array('noeud' => $cle),$valeur);
		}
		var_dump($jsoncommun['graphe']);*/

		$jsoncommun['graphe'] = array_values($jsoncommun['graphe']);

		$json = json_encode($jsoncommun);
		echo $json;
		return new Response('');
	}

}


{% extends "CartoDocumentationBundle:Layouts:layout.html.twig" %}
{% block body %}
<h1>{{ "Documentation" | trans }}</h1>

<h2>{{ "Liste des représentations du site" | trans }} :</h2>

<table class="representation-list">
	<tr>
		<td class="representation-title"> Radial Tree </td>
		<td class="representation-title"> Indented Tree </td>
	</tr>
	<tr>
		<td><img src="{{ asset('bundles/CartoRepresentationsBundle/images/nodeLinkTree.png')}}" width=50% /></td>
		<td><img src="{{ asset('bundles/CartoRepresentationsBundle/images/collapsibleTree.png')}}" width=50% /></td>
	</tr>
	<tr>
		<td>{% trans %}La vue permet de se situer dans l’espace de données et offre une visualisation d’ensemble à partir du mot choisi{% endtrans %}.</td>
		<td>{% trans %}La vue permet de filtrer les relations afin d'approfondir les branches de son choix{% endtrans %}.</td>
	</tr>
	<tr>
		<td class="representation-title"> Force Directed Graph </td>
		<td class="representation-title"> Bubble Tree </td>
	</tr>
	<tr>
		<td><img src="{{ asset('bundles/CartoRepresentationsBundle/images/forceDirectedGraph.png')}}" width=50% /></td>
		<td><img src="{{ asset('bundles/CartoRepresentationsBundle/images/bubbleTree.png')}}" width=50% /></td>
	</tr>
	<tr>
		<td>{% trans %}La vue révèle des structures sous-jacentes à partir du mot choisi{% endtrans %}.</td>
		<td>{% trans %}La vue offre une vision ensembliste{% endtrans %}.</td>
	</tr>
</table>

<h2>{{ "Utilisation" | trans }} :</h2>

<img src="{{ asset('bundles/CartoDocumentationBundle/images/jsoncommun.svg')}}" width=50% />
<br/>
<p>
	{% trans %}
	Nous partons d’un fichier json générique simple en établissant les nœuds, les relations, ainsi que le graphe c’est-à-dire pour chaque nœud source dire quel est le nœud destination avec quelle relation. Nous pouvons voir le prototype ci-dessous
	{% endtrans %}:
</p>
<pre>
{
	noeuds : [
		{id:'...', nom:'...', param_optionnels},
		{id:'...', nom:'...', param_optionnels},	
		{id:'...', nom:'...', param_optionnels}
	],
	relations : ['rel1','rel2',...]
	graphe : [
		{
			noeud:id,
			rel1:[id1,id2,...],
			rel2:[id1,...]
		},
		{
			noeud:id,
			rel1:[id1,id2,...],
			rel2:[id1,...]
		}
	]
}
</pre>
<p>
		<p>
			{% trans %}
			Param_optionnels peut être remplacé par ce que nous voulons, par exemple une couleur, un type etc
			{% endtrans %}.
		</p>
		<p>
			{% trans %}
			Les fichiers json sont utilisés comme des objets en Javascript ce qui nous simplifie la transformation du json pour le donner correctement formé à chaque vue
			{% endtrans %}.
		</p>
		<p>
			{% trans %}
			Un fichier json est un ensemble de nom/valeur
			{% endtrans %}.
		</p>
		<p>
			{% trans %}
			Ces mêmes éléments représentent trois types de données
			{% endtrans %}:
		</p>
		<ul>
			<li>{% trans %}des objets {% endtrans %};</li>
			<li>{% trans %}des tableaux {% endtrans %};</li>
			<li>{% trans %}des valeurs génériques de type tableau, objet, booléen, nombre, chaîne ou null{% endtrans %}. </li>
		</ul>

		<p>
			{% trans %}
			Notre fichier json générique a trois noms nœuds, relations, graphe. Nœuds est composé d’un tableau d’objet, où ses objets sont un ensemble de nom/valeur les noms sont 'id', 'nom'
			{% endtrans %}.
			{% trans %}
			Relation est composé d’un tableau de 'nom' représentant le nom de la relation. Pour terminé graphe est composé d’un tableau d’objet
			{% endtrans %}.
			{% trans %}
			Le nom des objets de graphe sont 'nœud', 'rel1', 'rel2', etc. 'Rel1' et 'rel2' sont des valeurs de relation. Les valeurs de 'rel1', 'rel2' doivent exister en tant que valeurs de 'id'
			{% endtrans %}.
		</p>

		<p>
			{% trans %}
			Nous avons choisi de transformer nos fichiers json générique en fichier cohérent pour chaque représentation. 
			Nous parcourons le fichier sur chaque nom de l’objet qui sont 'nœuds', 'relations', et 'graphe'
			{% endtrans %}.
		</p>
		
<h2>{{ "Visualisation" | trans }} :</h2>
		<p>
			{% trans %}
			Pour les vues nous utilisons D3js est une librairie Javascript qui permet un affichage de données de façon graphique et dynamique. 
			D3 permet donc de représenter des données en utilisant les standards du Web (SVG, HTML, CSS, Javascript) 
			{% endtrans %}.
			{% trans %}
			Cette librairie propose différentes visualisations majoritairement sous forme d'arbre ou de graphe.
			Nous avons choisi des vues simples pour la lisibilité et la navigabilité.
			Certes avec toutes les représentations qu'offre D3 nous aurions pu en choisir davantage comme la vue suivante
			{% endtrans %}:
			<p><img src="{{ asset('bundles/CartoDocumentationBundle/images/vue.png')}}" width=50%></p>
			{% trans %}
			Cependant nous avons ajouté plusieurs fonctionnalités à nos visualisations 
			comme colorer une ou plusieurs relations 
			ce qui permet de faire véhiculer la même signification que cette représentation mais de façon plus lisible pour l'utilisateur
			{% endtrans %}.
		</p>
</p>
{% endblock %}

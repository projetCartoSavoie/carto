<?php

namespace Carto\DonneesBundle\Entity\WN;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Comparison;

/**
 * MotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MotRepository extends EntityRepository
{
	//A enlever, présente juste pour l'apprentissage des tests
	/**
	 * fonction trouve
	 *
	 * @param string $recherche
	 * @return string
	 * @todo : enlever cette fonction et son test à la fin du projet
	*/
	public function trouve($recherche)
	{
		$mot = $this -> findOneByMot($recherche);
		if ($mot != NULL)
		{
			return $mot;
		}
		else
		{
			//On cherche tous les mots
			//$mots = $this -> findAll();
			//$regex = substr($recherche,1,3);
			$query = $this->getEntityManager()->createQuery(
				'SELECT m
				FROM CartoDonneesBundle:WN\Mot m
				WHERE m.mot LIKE :court'
			);
			$mots = array();
			for ($i = 0; $i < strlen($recherche) - 2; $i++)
			{
				$regex = substr($recherche,$i,3);
				$query->setParameter('court', '%'.$regex.'%');
				$mots = array_merge($mots, $query -> getResult());
			}

			//On remplace le tableau d'objets par un tableau de chaines de caractères
			$strmots = array();
			foreach ($mots as $m)
			{
				$strmots[] = $m -> getMot();
			}

			//Pour chaque mot on calcule son taux de correspondance
			$correspondances = array();
			foreach ($strmots as $m)
			{
				$correspondance[$m] = $this -> calculCorrespondance($m,$recherche);
			}
			$minindex = min($correspondance);
			$correspondance = array_flip($correspondance);
			$mot = $this -> findOneByMot($correspondance[$minindex]);
			return $mot;
		}
	}

	public function calculCorrespondance($m,$recherche)
	{
		$c = levenshtein($m,$recherche);
		if (soundex($m) == soundex($recherche)) { $c -= 10; }
		return $c;
	}
}

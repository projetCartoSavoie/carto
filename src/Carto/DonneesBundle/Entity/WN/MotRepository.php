<?php
/**
 * MotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @author Rémy Cluze <Remy.Cluze@etu.univ-savoie.fr>
 * @author Anthony Di Lisio <Anthony.Di-Lisio@etu.univ-savoie.fr>
 * @author Juliana Leclaire <Juliana.Leclaire@etu.univ-savoie.fr>
 * @author Rémi Mollard <Remi.Mollard@etu.univ-savoie.fr>
 * @author Céline de Roland <Celine.de-Roland@etu.univ-savoie.fr>
 *
 * @version 1.0
 */
namespace Carto\DonneesBundle\Entity\WN;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\Expr\Comparison;

/**
 * MotRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MotRepository extends EntityRepository
{

/**
 * Résultat
 *
 * @var array $resultat : tableau php représentant le graphe autour d'un mot
 */
	private $resultat;

/**
 * Mot
 *
 * @var Carto\DonneesBundle\Entity\WN\Mot : mot demandé
 */
	private $mot;

	/**
	 * fonction trouve
	 *
	 * Si le mot cherché est dans la base de données, alors la fonction
	 * renvoie le mot correspondant
	 * Sinon on cherche un mot qui ressemble à la recherche dans la bdd
	 * et on renvoie le mot correspondant
	 *
	 * @param string $recherche
	 * @return Carto\DonneesBundle\Entity\WN\Mot
	*/
	public function trouve($recherche)
	{
		$mot = $this -> findOneByMot($recherche);
		if ($mot != NULL)
		{
			return $mot;
		}
		else
		{
			//On cherche tous les mots ayant 3 caractères en commun avec la recherche
			$query = $this->getEntityManager()->createQuery(
				'SELECT m
				FROM CartoDonneesBundle:WN\Mot m
				WHERE m.mot LIKE :court'
			);
			$mots = array();
			for ($i = 0; $i < strlen($recherche) - 2; $i++)
			{
				$regex = substr($recherche,$i,3);
				$query->setParameter('court', '%'.$regex.'%');
				$mots = array_merge($mots, $query -> getResult());
			}

			//On remplace le tableau d'objets par un tableau de chaines de caractères
			$strmots = array();
			foreach ($mots as $m)
			{
				$strmots[] = $m -> getMot();
			}

			//Pour chaque mot on calcule son taux de correspondance
			$correspondances = array();
			foreach ($strmots as $m)
			{
				$correspondance[$m] = $this -> calculCorrespondance($m,$recherche);
			}
			$minindex = min($correspondance);
			$correspondance = array_flip($correspondance);

			//On retourne l'objet Mot correspondant au plus bas taux de correspondance
			$mot = $this -> findOneByMot($correspondance[$minindex]);
			return $mot;
		}
	}

	/**
	 * Calcul un taux de différence entre deux mots
	 *
	 * tient compte de la ressemblance sonore et de la
	 * ressemblance en terme de caractères (nombre d'insertions et suppressions
	 * nécessaires pour passer d'une chaine à l'autre)
	 * plus le résultat est petit plus les mots se ressemblent
	 *
	 * @param string $recherche
	 * @param string $m (mot à comparer à la recherche)
	 * @return integer
	*/
	public function calculCorrespondance($m,$recherche)
	{
		$c = levenshtein($m,$recherche);
		if (soundex($m) == soundex($recherche)) { $c -= 10; }
		return $c;
	}

	/**
	 * Ajoute un tableau de résultats en relation avec une source
	 *
	 * @param $entree : les résultats
	 * @param $relation : la relation entre la source et les résultats
	 * @param $inverseRelation : la relation entre les résultats et la source
	 * @param $type : le type des entrées
	 * @param $srctype : le type de la source
	 * @param $src : la source
	**/
	private function ajoutResultat($entree,$relation,$inverseRelation,$type,$srctype,$src)
	{
			//Préparation du noeud : 'id':'...','nom':'...','type':'...'
			if ($srctype == 'M') { $nom = $src -> getMot(); }
			else { $nom = $src -> getDefinition(); }
			$n = array(
				'id' => $srctype.$src -> getId(),
				'nom' => $nom,
				'type' => $srctype
			);

			//Ajout du noeud dans la liste si il n'y est pas déjà
			if (!in_array($n,$this -> resultat['noeuds'])) { $this -> resultat['noeuds'][] = $n; }
			if (!isset($this -> resultat['graphe'][$srctype.$src -> getId()])) 
			{
				$this -> resultat['graphe'][$srctype.$src -> getId()] = array( 'noeud' => $srctype.$src -> getId() );
			}

		foreach ($entree as $valeur) 
		{ 
			//Préparation du noeud : 'id':'...','nom':'...','type':'...'
			if ($type == 'M') { $nom = $valeur -> getMot(); }
			else { $nom = $valeur -> getDefinition(); }
			$n = array(
				'id' => $type.$valeur -> getId(),
				'nom' => $nom,
				'type' => $type
			);

			//Ajout du noeud dans la liste si il n'y est pas déjà
			if (!in_array($n,$this -> resultat['noeuds'])) { $this -> resultat['noeuds'][] = $n; }
			if (!isset($this -> resultat['graphe'][$type.$valeur -> getId()])) 
			{
				$this -> resultat['graphe'][$type.$valeur -> getId()] = array( 'noeud' => $type.$valeur -> getId() );
			}

			//Ajout de la relation
			$this -> resultat['graphe'][$srctype.$src -> getId()][$relation][] = $type.$valeur -> getId();

			//Ajout de la relation inverse
			$this -> resultat['graphe'][$type.$valeur -> getId()][$inverseRelation][] = $srctype.$src -> getId();
		}
	}

	/**
	 * Ajoute un résultat unique en relation avec une source (pour les relations OneToOne)
	 *
	 * inutile de spécifier les types : les seules relations OneToOne qui existent sont entre deux mots
	 *
	 * @param $entree : le résultat
	 * @param $relation : la relation entre la source et le résultat
	**/
	private function ajoutResultatOne($entree,$relation)
	{
		if ($entree != NULL) 
		{ 
			//Préparation du noeud : 'id':'...','nom':'...','type':'...'
			$n = array(
				'id' => 'M'.$entree -> getId(),
				'nom' => $entree -> getMot(),
				'type' => 'M'
			);
			//Ajout du noeud dans la liste si il n'y est pas déjà
			if (!in_array($n,$this -> resultat['noeuds'])) { $this -> resultat['noeuds'][] = $n; }

			//Ajout de la relation
			$this -> resultat['graphe']['M'.$this -> mot -> getId()][$relation][] = 'M'.$entree -> getId(); 
			$this -> resultat['graphe']['M'.$entree -> getId()][$relation][] = 'M'.$this -> mot -> getId(); 
		}
	}

	/**
	 * Ajoute tous les mots d'un synset donné
	 *
	 * @param $entree : la liste des synsets
	 * @param $type : le type de synset
	**/
	private function ajoutMots($entree,$type)
	{
		foreach($entree as $valeur)
		{
			$mots = $valeur -> getMots();
			foreach ($mots as $mot)
			{
				//Ajout du mot dans la liste de noeuds et dans le graphe si il n'y est pas déjà
				if (!isset($this -> resultat['graphe']['M'.$mot -> getId()])) 
				{
					$this -> resultat['noeuds'][] = array(
						'id' => 'M'.$mot -> getId(),
						'nom' => $mot -> getMot(),
						'type' => 'M'
					);
					$this -> resultat['graphe']['M'.$mot -> getId()] = array( 'noeud' => 'M'.$mot -> getId() );
				}
				//Création de la relation 'est dans' pour ce mot si elle n'existe pas déjà
				if (!isset($this -> resultat['graphe']['M'.$mot -> getId()]['estdans']))
				{ 
					$this -> resultat['graphe']['M'.$mot -> getId()]['estdans'] = array();
				}
				//Ajout de la relation 'est dans'
				if (!in_array($type.$valeur -> getId(),$this -> resultat['graphe']['M'.$mot -> getId()]['estdans']))
				{
					$this -> resultat['graphe']['M'.$mot -> getId()]['estdans'][] = $type.$valeur -> getId();
				}
				//Ajout de la relation 'contient'
				if (!isset($this -> resultat['graphe'][$type.$valeur -> getId()]['contient']))
				{ 
					$this -> resultat['graphe'][$type.$valeur -> getId()]['contient'] = array();
				}
				if (!in_array('M'.$mot -> getId(),$this -> resultat['graphe'][$type.$valeur -> getId()]['contient']))
				{
					$this -> resultat['graphe'][$type.$valeur -> getId()]['contient'][] = 'M'.$mot -> getId();
				}
			}
		}
	}

	/**
	 * fabrique un tableau php qui représente le graphe correspondant à une recherche de profondeur 3 à partir du mot demandé
	 *
	 * @param string $recherche
	 * @return array
	*/
	public function fabriqueGraphe($recherche)
	{

		//Initialisation du tableau résultat, qui sera ensuite encodé en json
		$this -> resultat = array(
			'noeuds' => array(), 
			'relations' => array(
				'derive',
				'pertainym',
				'build',
				'participle',
				'hypernym',
				'troponym',
				'hyponym',
				'meronym',
				'entails',
				'holonym',
				'antonym',
				'attribut',
				'cause',
				'consequence',
				'similar',
				'estdans',
				'contient'
			),
			'graphe' => array()
		);

		//Recherche du mot demandé et ajout dans la liste des noeuds et dans le graphe
		$this -> mot = $this -> trouve($recherche);
		$this -> resultat['noeuds'][] = array(
			'id' => 'M'.$this -> mot -> getId(),
			'nom' => $this -> mot -> getMot(),
			'type' => 'M'
		);
		$this -> resultat['graphe']['M'.$this -> mot -> getId()] = array( 'noeud' => 'M'.$this -> mot -> getId() );

		//Recherche des relations du mot
		$this -> ajoutResultat($this -> mot -> getDeriveFrom(),'derive','derive','M','M',$this -> mot);
		$this -> ajoutResultat($this -> mot -> getDeriveTo(),'derive','derive','M','M',$this -> mot);
		$this -> ajoutResultat($this -> mot -> getPertainFrom(),'pertainym','pertainym','M','M',$this -> mot);
		$this -> ajoutResultat($this -> mot -> getPertainTo(),'pertainym','pertainym','M','M',$this -> mot);
		$this -> ajoutResultatOne($this -> mot -> getParticipleOf(),'participle');
		$this -> ajoutResultatOne($this -> mot -> getParticipleTo(),'participle');
		$this -> ajoutResultatOne($this -> mot -> getBuiltFrom(),'build');
		$this -> ajoutResultatOne($this -> mot -> getBuild(),'build');

		//Recherche des synsets du mot
		$this -> ajoutResultat($this -> mot -> getNsynsets(),'estdans','contient','N','M',$this -> mot);
		$this -> ajoutResultat($this -> mot -> getVsynsets(),'estdans','contient','V','M',$this -> mot);
		$this -> ajoutResultat($this -> mot -> getAsynsets(),'estdans','contient','A','M',$this -> mot);
		$this -> ajoutResultat($this -> mot -> getRsynsets(),'estdans','contient','R','M',$this -> mot);

		//Recherche des mots des synsets
		$this -> ajoutMots($this -> mot -> getNSynsets(),'N');
		$this -> ajoutMots($this -> mot -> getVSynsets(),'V');
		$this -> ajoutMots($this -> mot -> getASynsets(),'A');
		$this -> ajoutMots($this -> mot -> getRSynsets(),'R');

		//Recherche des relations des synsets et de leurs mots
		foreach ($this -> mot -> getNSynsets() as $valeur)
		{
			$this -> ajoutResultat($valeur -> getHypernyms(),'hypernym','hyponym','N','N',$valeur);
			$this -> ajoutMots($valeur -> getHypernyms(),'N');
			$this -> ajoutResultat($valeur -> getHyponyms(),'hyponym','hypernym','N','N',$valeur);
			$this -> ajoutMots($valeur -> getHyponyms(),'N');
			$this -> ajoutResultat($valeur -> getMeronyms(),'meronym','holonym','N','N',$valeur);
			$this -> ajoutMots($valeur -> getMeronyms(),'N');
			$this -> ajoutResultat($valeur -> getHolonyms(),'holonym','meronym','N','N',$valeur);
			$this -> ajoutMots($valeur -> getHolonyms(),'N');
			$this -> ajoutResultat($valeur -> getAntonyms(),'antonym','antonym','N','N',$valeur);
			$this -> ajoutMots($valeur -> getAntonyms(),'N');
			$this -> ajoutResultat($valeur -> getHasAttribute(),'attribut','attribut','A','N',$valeur);
			$this -> ajoutMots($valeur -> getHasAttribute(),'N');
		}
		foreach ($this -> mot -> getVSynsets() as $valeur)
		{
			$this -> ajoutResultat($valeur -> getTroponyms(),'troponym','hyponym','V','V',$valeur);
			$this -> ajoutMots($valeur -> getTroponyms(),'V');
			$this -> ajoutResultat($valeur -> getHyponyms(),'hyponym','troponym','V','V',$valeur);
			$this -> ajoutMots($valeur -> getHyponyms(),'V');
			$this -> ajoutResultat($valeur -> getEntails(),'entails','holonym','V','V',$valeur);
			$this -> ajoutMots($valeur -> getEntails(),'V');
			$this -> ajoutResultat($valeur -> getHolonyms(),'holonym','entails','V','V',$valeur);
			$this -> ajoutMots($valeur -> getHolonyms(),'V');
			$this -> ajoutResultat($valeur -> getAntonyms(),'antonym','antonym','V','V',$valeur);
			$this -> ajoutMots($valeur -> getAntonyms(),'V');
			$this -> ajoutResultat($valeur -> getCauses(),'cause','consequence','V','V',$valeur);
			$this -> ajoutMots($valeur -> getCauses(),'V');
			$this -> ajoutResultat($valeur -> getConsequences(),'consequence','cause','V','V',$valeur);
			$this -> ajoutMots($valeur -> getConsequences(),'V');
		}
		foreach ($this -> mot -> getASynsets() as $valeur)
		{
			$this -> ajoutResultat($valeur -> getAntonyms(),'antonym','antonym','A','A',$valeur);
			$this -> ajoutMots($valeur -> getAntonyms(),'A');
			$this -> ajoutResultat($valeur -> getIsAttributeOf(),'attribut','attribut','N','A',$valeur);
			$this -> ajoutMots($valeur -> getIsAttributeOf(),'A');
			$this -> ajoutResultat($valeur -> getSimilars(),'similar','similar','A','A',$valeur);
			$this -> ajoutMots($valeur -> getSimilars(),'A');
		}
		foreach ($this -> mot -> getRSynsets() as $valeur)
		{
			$this -> ajoutResultat($valeur -> getAntonyms(),'antonym','antonym','R','R',$valeur);
			$this -> ajoutMots($valeur -> getAntonyms(),'R');
		}

		//On enlève les clés du tableau graphe pour correspondre au format commun
		$this -> resultat['graphe'] = array_values($this -> resultat['graphe']);

		//On retourne le tableau obtenu
		return $this -> resultat;
	}
}
